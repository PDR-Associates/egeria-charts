# SPDX-License-Identifier: Apache-2.0
# Copyright Contributors to the Egeria project.

{{ if .Values.egeria.config }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ .Release.Name }}-autostart
  labels:
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    helm.sh/chart: {{ include "egeria-base.chart" . }}
    app.kubernetes.io/name: {{ include "egeria-base.name" . }}
{{ if .Values.options.jobs.config.usehook }}
  annotations:
    "helm.sh/hook": post-install
    "helm.sh/hook-weight": "0"
    "helm.sh/hook-delete-policy": "{{ if .Values.options.jobs.config.jobdelete }} hook-succeeded , {{ end }} before-hook-creation"
{{ end }}
spec:
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/name: {{ include "egeria-base.name" . }}
    spec:
      {{- include "egeria.security" . | nindent 6 }}
      restartPolicy: OnFailure
      initContainers:
        - name: wait-for-egeria-base-configuration
          image: "{{ .Values.global.image.kubectl.registry }}/{{ .Values.global.image.kubectl.name }}:{{ .Values.global.image.kubectl.tag }}"
          imagePullPolicy: {{ (.Values.global.image.configure.pullPolicy | default .Values.imageDefaults.pullPolicy) | default (ternary "Always" "IfNotPresent" ( hasSuffix "SNAPSHOT" (.Values.global.image.configure.tag | default .Values.egeria.version )))  }}
          command:
            - /bin/sh
            - -c
            - |
              printf "Checking the job \"{{ include "egeria-base.JobName" . }}\"...\n"
              until [ "$(kubectl get job {{ include "egeria-base.JobName" . }} -o jsonpath='{.status.conditions[?(@.type=="Complete")].status}')" = "True" ]; do
                printf "Waiting for job \"{{ include "egeria-base.JobName" . }}\" to complete...\n"
                sleep 10
              done
        {{- if index .Values "egeria-lineage" "enabled" }}
        - name: wait-for-egeria-lineage-configuration
          image: "{{ .Values.global.image.kubectl.registry }}/{{ .Values.global.image.kubectl.name }}:{{ .Values.global.image.kubectl.tag }}"
          imagePullPolicy: {{ (.Values.global.image.configure.pullPolicy | default .Values.imageDefaults.pullPolicy) | default (ternary "Always" "IfNotPresent" ( hasSuffix "SNAPSHOT" (.Values.global.image.configure.tag | default .Values.egeria.version )))  }}
          command:
            - /bin/sh
            - -c
            - |
              printf "Checking the job \"{{ include "egeria-lineage.JobName" (index .Subcharts "egeria-lineage") }}\"...\n"
              until [ "$(kubectl get job {{ include "egeria-lineage.JobName" (index .Subcharts "egeria-lineage") }} -o jsonpath='{.status.conditions[?(@.type=="Complete")].status}')" = "True" ]; do
                printf "Waiting for job \"{{ include "egeria-lineage.JobName" (index .Subcharts "egeria-lineage") }}\" to complete...\n"
                sleep 10
              done
        {{- end }}
      containers:
      - name: initialize
        image: "{{ .Values.global.image.kubectl.registry }}/{{ .Values.global.image.kubectl.name }}:{{ .Values.global.image.kubectl.tag }}"
        imagePullPolicy: IfNotPresent
        envFrom:
          - configMapRef:
              name: {{ .Release.Name }}-env
        command:
        - /bin/bash
        - -c
        - |
          currentValue=$(kubectl get configmaps/{{ .Release.Name }}-autostart -o jsonpath='{.data.STARTUP_SERVER_LIST}');
          postconfigStartupServerList=($(echo "${POSTCONFIG_STARTUP_SERVER_LIST}" | tr "," "\n"));
          tempList=();

          if [[ -z "${postconfigStartupServerList}" ]]; then {
            printf "POSTCONFIG_STARTUP_SERVER_LIST is empty, nothing to do.\n";
            exit 0;
          } fi

          if [[ -z "${currentValue}" ]]; then {
            printf "Currently Value in the ConfigMaps is empty, patching now with \"%s\"...\n" "${postconfigStartupServerList[*]}";
            tempList=("${postconfigStartupServerList[@]}");
          } else {
            printf "Current values in the ConfigMaps: \n%s\n\n" "${currentValue}";
            tempList=($(echo "${currentValue}" | tr "," "\n"));
            
            for ((i=0; i<"${#postconfigStartupServerList[@]}"; i++)) {
              if [[ "${currentValue}" == *${postconfigStartupServerList[i]}* ]]; then {
                printf "Current value already contains \"%s\", skipping...\n" "${postconfigStartupServerList[i]}";
              } else {
                tempList+=("${postconfigStartupServerList[i]}");
              } fi
            }
          } fi
          
          # make it comma seperated
          newServers=$(printf '%s,' "${tempList[@]}");
          unset tempList
          # remove the trailing comma
          newServers=${newServers%,};

          printf "Enabling auto-start for following servers: \"%s\"\n" "${newServers}"
          kubectl patch configmaps/{{ .Release.Name }}-autostart --type merge -p "{\"data\":{\"STARTUP_SERVER_LIST\":\"${newServers}\"}}";
          if [[ "$?" -eq 0 ]]; then {
            printf "Enabling auto-start for the configured servers was successful.\n"
            exit 0
          } else {
            printf "Enabling auto-start for the configured servers has failed.\n"
            exit 1
          } fi
  # Keep trying quite a few times to aid in debugging
  backoffLimit: {{ .Values.options.jobs.config.backOffLimit }}
  {{ end }}
