# SPDX-License-Identifier: Apache-2.0
# Copyright Contributors to the Egeria project.
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/name: {{ include "egeria-base.name" . }}
    helm.sh/chart: {{ include "egeria-base.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/component: platform
  name: {{ .Release.Name }}-platform

spec:
  type: {{ .Values.service.type }}
  ports:
    - port: 9443
      targetPort: 9443
      {{- if ( eq  .Values.service.type "NodePort" ) }}
      nodePort: {{ .Values.service.nodeport.platform }}
      {{- end }}
  {{ if .Values.egeria.debug }}
    - name: debug
      port: 5005
      targetPort: 5005
      {{- if ( eq  .Values.service.type "NodePort" ) -}}
      nodePort: {{ .Values.service.nodeport.platformdebug }}
      {{- end }}
  {{ end }}
  selector:
    app.kubernetes.io/name: {{ include "egeria-base.name" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/component: platform
...
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "egeria-base.name" . }}-platform
  labels:
    app.kubernetes.io/name: {{ include "egeria-base.name" . }}
    helm.sh/chart: {{ include "egeria-base.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/component: platform
spec:
  replicas: 1
  serviceName: {{ .Release.Name }}-platform
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "egeria-base.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
      app.kubernetes.io/component: platform
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "egeria-base.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/component: platform
    spec:
    {{- include "egeria.security" . | nindent 6 }}
{{ if .Values.extralibs }}
      initContainers:
        - name: init-connector
          image: "{{ if (.Values.global.image.configure.registry | default .Values.imageDefaults.registry) }}{{ .Values.global.image.configure.registry | default .Values.imageDefaults.registry }}/{{ end }}\
                  {{ if (.Values.global.image.configure.namespace | default .Values.imageDefaults.namespace) }}{{ .Values.global.image.configure.namespace | default .Values.imageDefaults.namespace }}/{{ end }}\
                  {{ .Values.global.image.configure.name }}\
                  :{{ .Values.global.image.configure.tag | default .Values.imageDefaults.tag }}"
          imagePullPolicy: {{ .Values.global.image.configure.pullPolicy | default .Values.imageDefaults.pullPolicy }}
          command:
            - "/bin/bash"
            - "-c"
            - >
              cd  /deployments/server/extralib &&
{{ range .Values.extralibs }}
              curl --location {{ .url | quote }} --output {{ .filename | quote }} &&
{{ end }}
              echo "Downloads complete."
          volumeMounts:
            - mountPath:  /deployments/server/extralib
              name: egeria-connector-volume
{{ end }}
      containers:
        - name: egeria
          image: "{{ if (.Values.image.egeria.registry | default .Values.imageDefaults.registry) }}{{ .Values.image.egeria.registry | default .Values.imageDefaults.registry }}/{{ end }}\
                  {{ if (.Values.image.egeria.namespace | default .Values.imageDefaults.namespace) }}{{ .Values.image.egeria.namespace | default .Values.imageDefaults.namespace }}/{{ end }}\
                  {{ .Values.image.egeria.name }}\
                  :{{ .Values.image.egeria.tag | default .Values.egeria.version }}"
          imagePullPolicy: {{ (.Values.image.egeria.pullPolicy | default .Values.imageDefaults.pullPolicy) | default (ternary "Always" "IfNotPresent" ( hasSuffix "SNAPSHOT" (.Values.image.egeria.tag | default .Values.egeria.version )))  }}
          envFrom:
            - configMapRef:
                name: {{ .Release.Name }}-env
            - configMapRef:
                name: {{ .Release.Name }}-autostart
          env:
          {{- if .Values.global.kafka.security.enabled }}
          - name: "KAFKA_SECURITY_ENABLED"
            value: "{{ .Values.global.kafka.security.enabled }}"
          - name: "KAFKA_SECURITY_PROTOCOL"
            value: {{ .Values.global.kafka.security.protocol }}
          - name: "KAFKA_SECURITY_KEYSTORE_LOCATION"
            value: /jks/{{ .Values.global.kafka.security.keystoreLocation }}
          - name: "KAFKA_SECURITY_TRUSTSTORE_LOCATION"
            value: /jks/{{ .Values.global.kafka.security.truststoreLocation }}
          - name: "KAFKA_SECURITY_KEYSTORE_PASSWORD"
            valueFrom:
              secretKeyRef:
                name: jks-{{ .Release.Name }}-{{ .Values.global.kafka.userName }}-{{ .Values.global.kafka.security.secretTag }}
                key: {{ .Values.global.kafka.security.keystorePassword }}
          - name: "KAFKA_SECURITY_TRUSTSTORE_PASSWORD"
            valueFrom:
              secretKeyRef:
                name: jks-{{ .Release.Name }}-{{ .Values.global.kafka.userName }}-{{ .Values.global.kafka.security.secretTag }}
                key: {{ .Values.global.kafka.security.truststorePassword }}
          {{- end }}
          - name: JAVA_DEBUG
          {{ if .Values.egeria.debug }}
            value:  "true"
          {{ else }}
            value: "false"
          {{ end }}
          ports:
            - containerPort: 9443
          {{ if .Values.egeria.debug }}
            - containerPort: 5005
          {{ end }}
          # No other checks until this passes
          startupProbe:
            tcpSocket:
              port: 9443
            initialDelaySeconds: 30
            periodSeconds: 10
            failureThreshold: 25
          # Is pod ready to service network requests - it will pause (for replicas, others will take the load)
          readinessProbe:
            httpGet:
              path: /open-metadata/platform-services/users/{{ .Values.global.egeria.user }}/server-platform/origin
              port: 9443
              scheme: HTTPS
            periodSeconds: 10
            failureThreshold: 6
          # Is pod doing useful work - if not we will restart it
          livenessProbe:
            httpGet:
              path: /open-metadata/platform-services/users/{{ .Values.global.egeria.user }}/server-platform/origin
              port: 9443
              scheme: HTTPS
            periodSeconds: 10
            failureThreshold: 6
          resources: {}
          volumeMounts:
          {{- if .Values.global.kafka.security.enabled }}
            - mountPath: /jks
              name: jks
              readOnly: true
          {{- end }}
          {{ if .Values.egeria.persistence }}
            - mountPath: "/deployments/data"
              # NO need to include release name in template - included as a SS
              name: data
          {{ end }}
            - name: extlib
              mountPath: /extlib
            - mountPath:  /deployments/server/extralib
              name: egeria-connector-volume
              readOnly: true
      restartPolicy: Always
      volumes:
        - name: extlib
          configMap:
            name: {{ .Release.Name }}-extlib
        - name: egeria-connector-volume
          emptyDir: {}
        {{- if .Values.global.kafka.security.enabled }}
        - name: jks
          secret:
            secretName: "jks-{{ .Release.Name }}-{{ .Values.global.kafka.userName }}-{{ .Values.global.kafka.security.secretTag }}"
            items:
            - key: {{ .Values.global.kafka.security.keystoreLocation }}
              path: {{ .Values.global.kafka.security.keystoreLocation }}
            - key: {{ .Values.global.kafka.security.truststoreLocation }}
              path: {{ .Values.global.kafka.security.truststoreLocation }}
        {{- end }}
      securityContext:
        {  }
  {{ if .Values.egeria.persistence }}
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: {{ .Values.egeria.storageSize}}
      {{ if .Values.egeria.storageClass }}
      storageClassName: {{ .Values.egeria.storageClass }}
      {{ end }}
  {{ end }}
...
