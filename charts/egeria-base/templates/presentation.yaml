# SPDX-License-Identifier: Apache-2.0
# Copyright Contributors to the Egeria project.
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/name: {{ include "egeria-base.name" . }}
    helm.sh/chart: {{ include "egeria-base.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/component: presentation
  name: {{ .Release.Name }}-presentation

spec:
  type: {{ .Values.service.type }}
  ports:
    - port: 8091
      targetPort: 8091
      {{- if ( eq  .Values.service.type "NodePort" ) }}
      nodePort: {{ .Values.service.nodeport.presentation }}
      {{- end }}
  selector:
    app.kubernetes.io/name: {{ include "egeria-base.name" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/component: presentation
...
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "egeria-base.name" . }}-presentation
  labels:
    app.kubernetes.io/name: {{ include "egeria-base.name" . }}
    helm.sh/chart: {{ include "egeria-base.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/component: presentation
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "egeria-base.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
      app.kubernetes.io/component: presentation
  strategy: {}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "egeria-base.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/component: presentation
    spec:
      {{- include "egeria.security" . | nindent 6 }}
      containers:
        - name: presentation
          image: "{{ if (.Values.image.presentation.registry | default .Values.imageDefaults.registry) }}{{ .Values.image.presentation.registry | default .Values.imageDefaults.registry }}/{{ end }}\
                  {{ if (.Values.image.presentation.namespace | default .Values.imageDefaults.namespace) }}{{ .Values.image.presentation.namespace | default .Values.imageDefaults.namespace }}/{{ end }}\
                  {{ .Values.image.presentation.name }}\
                  :{{ .Values.image.presentation.tag | default .Values.egeria.version }}"
          imagePullPolicy: {{ (.Values.image.presentation.pullPolicy | default .Values.imageDefaults.pullPolicy) | default (ternary "Always" "IfNotPresent" ( contains "-rc" (.Values.image.presentation.tag | default .Values.egeria.version )))  }}
          envFrom:
            - configMapRef:
                name: {{ .Release.Name }}-env
          ports:
            - containerPort: 8091
          # No other checks until this passes
          startupProbe:
            tcpSocket:
              port: 8091
            initialDelaySeconds: 10
            periodSeconds: 10
            failureThreshold: 15
          # Is pod ready to service network requests - it will pause (for replicas, others will take the load)
          readinessProbe:
            httpGet:
              path: /{{ .Values.egeria.viewOrg }}
              port: 8091
              scheme: HTTPS
            periodSeconds: 10
            failureThreshold: 6
          # Is pod doing useful work - if not we will restart it
          livenessProbe:
            httpGet:
              path: /{{ .Values.egeria.viewOrg }}
              port: 8091
              scheme: HTTPS
            periodSeconds: 10
            failureThreshold: 6
          resources: {}
      {{- if .Values.global.kafka.security.enabled }}
          volumeMounts:
          - name: jks
            mountPath: /jks
            readOnly: true
          env:
          - name: "KAFKA_SECURITY_ENABLED"
            value: "{{ .Values.global.kafka.security.enabled }}"
          - name: "KAFKA_SECURITY_PROTOCOL"
            value: {{ .Values.global.kafka.security.protocol }}
          - name: "KAFKA_SECURITY_KEYSTORE_LOCATION"
            value: /jks/{{ .Values.global.kafka.security.keystoreLocation }}
          - name: "KAFKA_SECURITY_TRUSTSTORE_LOCATION"
            value: /jks/{{ .Values.global.kafka.security.truststoreLocation }}
          - name: "KAFKA_SECURITY_KEYSTORE_PASSWORD"
            valueFrom:
              secretKeyRef:
                name: jks-{{ .Release.Name }}-{{ .Values.global.kafka.userName }}-{{ .Values.global.kafka.security.secretTag }}
                key: {{ .Values.global.kafka.security.keystorePassword }}
          - name: "KAFKA_SECURITY_TRUSTSTORE_PASSWORD"
            valueFrom:
              secretKeyRef:
                name: jks-{{ .Release.Name }}-{{ .Values.global.kafka.userName }}-{{ .Values.global.kafka.security.secretTag }}
                key: {{ .Values.global.kafka.security.truststorePassword }}
      volumes:
        - name: jks
          secret:
            secretName: "jks-{{ .Release.Name }}-{{ .Values.global.kafka.userName }}-{{ .Values.global.kafka.security.secretTag }}"
            items:
            - key: {{ .Values.global.kafka.security.keystoreLocation }}
              path: {{ .Values.global.kafka.security.keystoreLocation }}
            - key: {{ .Values.global.kafka.security.truststoreLocation }}
              path: {{ .Values.global.kafka.security.truststoreLocation }}
      {{- end }}
      restartPolicy: Always

...
