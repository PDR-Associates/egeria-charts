# SPDX-License-Identifier: Apache-2.0
# Copyright Contributors to the Egeria project.

{{ if .Values.egeria.config }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ .Release.Name }}-config
  labels:
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    helm.sh/chart: {{ include "egeria-base.chart" . }}
    app.kubernetes.io/name: {{ include "egeria-base.name" . }}
{{ if .Values.options.jobs.config.usehook }}
  annotations:
    "helm.sh/hook": post-install
    "helm.sh/hook-weight": "0"
    "helm.sh/hook-delete-policy": "{{ if .Values.options.jobs.config.jobdelete }} hook-succeeded , {{ end }} before-hook-creation"
{{ end }}
spec:
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/name: {{ include "egeria-base.name" . }}
    spec:
      {{- include "egeria.security" . | nindent 6 }}
      restartPolicy: OnFailure
      initContainers:
        - name: wait-for-egeria
          image: "{{ if (.Values.global.image.configure.registry | default .Values.imageDefaults.registry) }}{{ .Values.global.image.configure.registry | default .Values.imageDefaults.registry }}/{{ end }}\
                  {{ if (.Values.global.image.configure.namespace | default .Values.imageDefaults.namespace) }}{{ .Values.global.image.configure.namespace | default .Values.imageDefaults.namespace }}/{{ end }}\
                  {{ .Values.global.image.configure.name }}\
                  :{{ .Values.global.image.configure.tag | default .Values.egeria.version }}"
          imagePullPolicy: {{ (.Values.global.image.configure.pullPolicy | default .Values.imageDefaults.pullPolicy) | default (ternary "Always" "IfNotPresent" ( hasSuffix "SNAPSHOT" (.Values.global.image.configure.tag | default .Values.egeria.version )))  }}
          env:
            - name: SERVICE
              value: {{ .Release.Name }}-platform
        - name: wait-for-kafka
          {{- if .Values.global.kafka.external }}
          image: "{{ .Values.global.image.kubectl.registry }}/{{ .Values.global.image.kubectl.name }}:{{ .Values.global.image.kubectl.tag }}"
          imagePullPolicy: {{ (.Values.global.image.configure.pullPolicy | default .Values.imageDefaults.pullPolicy) | default (ternary "Always" "IfNotPresent" ( hasSuffix "SNAPSHOT" (.Values.global.image.configure.tag | default .Values.egeria.version )))  }}
          command:
            - /bin/sh
            - -c
            - |
              printf "Checking the kafka cluster \"{{ include "egeria-base.KafkaClusterName" . }}\"...\n"
              until [ "$(kubectl get kafkas.kafka.strimzi.io -n {{ include "egeria-base.KafkaClusterNamespace" . }} {{ include "egeria-base.KafkaClusterName" . }} -o jsonpath='{.status.conditions[?(@.type=="Ready")].status}')" = "True" ]; do
                printf "Waiting for kafka cluster \"{{ include "egeria-base.KafkaClusterName" . }}\" to get ready...\n"
                sleep 10
              done 
          {{- else }}
          image: "{{ if (.Values.global.image.configure.registry | default .Values.imageDefaults.registry) }}{{ .Values.global.image.configure.registry | default .Values.imageDefaults.registry }}/{{ end }}\
                  {{ if (.Values.global.image.configure.namespace | default .Values.imageDefaults.namespace) }}{{ .Values.global.image.configure.namespace | default .Values.imageDefaults.namespace }}/{{ end }}\
                  {{ .Values.global.image.configure.name }}\
                  :{{ .Values.global.image.configure.tag | default .Values.egeria.version }}"
          imagePullPolicy: {{ (.Values.global.image.configure.pullPolicy | default .Values.imageDefaults.pullPolicy) | default (ternary "Always" "IfNotPresent" ( hasSuffix "SNAPSHOT" (.Values.global.image.configure.tag | default .Values.egeria.version )))  }}
          env:
            - name: SERVICE
              value: {{ .Release.Name }}-strimzi-kafka-bootstrap
          {{- end }}
        {{- if not (index .Values "strimzi" "kafka" "config" "autoCreateTopics") }}
        {{- $cohortName := $.Values.egeria.cohort }}
        {{- $omasServerName := $.Values.global.egeria.serverName }}
        {{- $kafkaClusterNamespace := include "egeria-base.KafkaClusterNamespace" . }}
        - name: wait-for-kafka-topics
          image: "{{ .Values.global.image.kubectl.registry }}/{{ .Values.global.image.kubectl.name }}:{{ .Values.global.image.kubectl.tag }}"
          imagePullPolicy: {{ (.Values.global.image.configure.pullPolicy | default .Values.imageDefaults.pullPolicy) | default (ternary "Always" "IfNotPresent" ( hasSuffix "SNAPSHOT" (.Values.global.image.configure.tag | default .Values.egeria.version )))  }}
          command:
            - /bin/sh
            - -c
            - |
        {{- range $topicName := $.Values.strimzi.kafka.topics.name }}
              printf "Checking the kafka topic \"{{ $topicName | replace "#{cohortName}#" $cohortName | replace "#{serverName}#" $omasServerName }}\"\n"
              until [ "$(kubectl get kafkatopics.kafka.strimzi.io -n {{ $kafkaClusterNamespace }} "{{ $topicName | replace "#{cohortName}#" $cohortName | replace "#{serverName}#" $omasServerName | lower}}" -o jsonpath='{.status.conditions[?(@.type=="Ready")].status}')" = "True" ]; do
                printf "Waiting for kafka topic \"{{ $topicName | replace "#{cohortName}#" $cohortName | replace "#{serverName}#" $omasServerName }}\" to get ready...\n"
                sleep 1
              done
        {{- end}}
        {{- end }}
      containers:
        - name: initialize
          image: "{{ if (.Values.global.image.configure.registry | default .Values.imageDefaults.registry) }}{{ .Values.global.image.configure.registry | default .Values.imageDefaults.registry }}/{{ end }}\
                  {{ if (.Values.global.image.configure.namespace | default .Values.imageDefaults.namespace) }}{{ .Values.global.image.configure.namespace | default .Values.imageDefaults.namespace }}/{{ end }}\
                  {{ .Values.global.image.configure.name }}\
                  :{{ .Values.global.image.configure.tag | default .Values.egeria.version }}"
          imagePullPolicy: {{ (.Values.global.image.configure.pullPolicy | default .Values.imageDefaults.pullPolicy) | default (ternary "Always" "IfNotPresent" ( hasSuffix "SNAPSHOT" (.Values.global.image.configure.tag | default .Values.egeria.version )))  }}
          envFrom:
            - configMapRef:
                name: {{ .Release.Name }}-env
          command: [ "/bin/bash" ]
          args: [ "/scripts/config-egeria.sh" ]
          volumeMounts:
          - name: scripts-vol
            mountPath: /scripts
      volumes:
        - name: scripts-vol
          configMap:
            name: {{ .Release.Name }}-scripts-configmap
  # Keep trying quite a few times to aid in debugging
  backoffLimit: {{ .Values.options.jobs.config.backOffLimit }}
  {{ end }}
